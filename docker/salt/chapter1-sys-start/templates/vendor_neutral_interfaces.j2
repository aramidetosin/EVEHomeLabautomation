{% if grains.os == 'junos' %}
interfaces {
{# TODO - Custom Module/ Jinja Filter to calc min-links from len of lga members#}

    {%- for interface_dict in pillar.interfaces %}
    {%- for intf, intf_data_dict in interface_dict.items() %}
    {% set splited_intf = intf.split(".") %}
    {% set lag_intf = False %}

    {%- if "ae" in intf -%}
        {% set lag_intf = True -%}
    {%- endif -%}


    {{ splited_intf[0] }} {
        description {{ intf_data_dict.description }};
        {%- if intf_data_dict.mtu is defined -%}
        mtu {{ intf_data_dict.mtu }};
        {%- endif -%}
        {%- if lag_intf -%}
            aggregated-ether-options {
                minimum-links {{ intf_data_dict.min_links }};
                lacp {
                    active;
                }
            }
        {%- endif %}
        unit {{ splited_intf[1] }}  {
            {%- if intf_data_dict.ipv4addr is defined -%}
            family inet {
                {%- for ipv4 in intf_data_dict.ipv4addr %}
                address {{ ipv4 }};
                {%- endfor %}
            }
            {%- endif %}
            {%- if intf_data_dict.ipv6addr is defined %}
            family inet6 {
                {%- for ipv6 in intf_data_dict.ipv6addr %}
                address {{ ipv6 }};
                {%- endfor %}
            }
            {%- endif %}
        }
    }

    {%- if lag_intf -%}
        {%- for member in intf_data_dict.members -%}
    {{ member }} {
        gigether-options {
            802.3ad {{ splited_intf[0] }};
        }
    }
        {%- endfor -%}
    {%- endif -%}

    {% endfor %}
    {% endfor %}
}
{% elif grains.os == 'ios' %}
{# TO DO - Create filter to get network id and network mask from cidr#}
{% for interface_dict in pillar.interfaces %}
{% for intf , addr_dict in interface_dict.items() %}
  {% if "." in intf %}
  interface {{intf.split(".")[0]}}
    no shut
  {% endif %}
interface {{intf}}
  {% if "." in intf %}
  encapsulation dot1Q {{intf.split(".")[1]}}
  {% endif %}
  {% if addr_dict.description %}
  description {{addr_dict.description}}
  {% endif %}
  {% if addr_dict.ipv4addr %}
  ip address {{addr_dict.ipv4addr.split("/")[0]}} 255.255.255.0
  {% endif %}
  {% if addr_dict.ipv6addr %}
  ipv6 address {{addr_dict.ipv6addr}}
  {% endif %}
  no shut
{% endfor -%}
{% endfor -%}
interface {{pillar.mgmtint}}
  ip address {{pillar.mgmtipv4.split("/")[0]}} 255.255.255.0
  no shut
int lo0
  ip address {{pillar.loopbackv4.split("/")[0]}} 255.255.255.255
{% else %}
{# TO DO - Create filter to get network id and network mask from cidr#}
{%- set interfaces = pillar.interfaces -%}

{% for interface_dict in interfaces %}
{% for intf, addr_dict in interface_dict.items() %}
interface {{intf}}
  {% if addr_dict.description %}
  description {{addr_dict.description}}
  {% endif %}
  {% if addr_dict.ipv4addr %}
  ipv4 address {{addr_dict.ipv4addr}}
  {% endif %}
  {% if addr_dict.ipv6addr %}
  ipv6 address {{addr_dict.ipv6addr}}
  {% endif %}
  no shut
{% endfor -%}
{% endfor -%}
interface {{pillar.mgmtint}}
 ipv4 address {{pillar.mgmtipv4}}
 no shut
interface lo0
 ipv4 address {{pillar.loopbackv4}}
{% endif %}